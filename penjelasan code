struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

Struct Node merepresentasikan sebuah node dalam linked list.
data menyimpan nilai integer.
next adalah pointer ke node berikutnya dalam daftar.
prev adalah pointer ke node sebelumnya dalam daftar.

struct Node* newNode(int data) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = data;
    temp->next = NULL;
    temp->prev = NULL;
    return temp;
}
Fungsi newNode membuat node baru dengan nilai data yang diberikan.
Alokasi memori untuk node baru dilakukan menggunakan malloc.
Node baru diinisialisasi dengan nilai data dan pointer next serta prev diset ke NULL.

void insert(struct Node** head, int data) {
    struct Node* temp = newNode(data);
    if (*head == NULL) {
        *head = temp;
        (*head)->next = *head;
        (*head)->prev = *head;
    } else {
        struct Node* last = (*head)->prev;
        last->next = temp;
        temp->prev = last;
        temp->next = *head;
        (*head)->prev = temp;
    }
}
Fungsi insert menyisipkan node baru ke dalam linked list.
Jika linked list kosong (head adalah NULL), node baru menjadi head dan menunjuk ke dirinya sendiri untuk next dan prev.
Jika linked list tidak kosong, node baru ditempatkan di akhir daftar. Node baru menunjuk ke head sebagai next dan node terakhir sebelumnya sebagai prev.

void printList(struct Node* head) {
    struct Node* temp = head;
    if (head == NULL) {
        printf("Linked list is empty.\n");
        return;
    }

    do {
        printf("Address: %p, Data: %d\n", temp, temp->data);
        temp = temp->next;
    } while (temp != head);
}
Fungsi printList mencetak data dari setiap node dalam linked list.
Jika linked list kosong, pesan "Linked list is empty." ditampilkan.
Jika tidak kosong, data dari setiap node dicetak bersama dengan alamat memorinya.

void sortListAddress(struct Node** head) {
    struct Node *current = *head, *index = NULL;
    int temp;
    
    if (*head == NULL)
        return;
    else {
        do {
            index = current->next;
            while (index != *head) {
                if (current->data > index->data) {
                    temp = current->data;
                    current->data = index->data;
                    index->data = temp;
                    
                    if (current == *head) {
                        *head = index;
                    } else if (index == *head) {
                        *head = current;
                    }

                    if (current->next == index) {
                        struct Node *currentPrev = current->prev;
                        struct Node *indexNext = index->next;
                        
                        currentPrev->next = index;
                        index->prev = currentPrev;
                        
                        index->next = current;
                        current->prev = index;
                        
                        current->next = indexNext;
                        indexNext->prev = current;
                    } else {
                        struct Node *currentNext = current->next;
                        struct Node *currentPrev = current->prev;
                        struct Node *indexNext = index->next;
                        struct Node *indexPrev = index->prev;
                        
                        currentPrev->next = index;
                        index->prev = currentPrev;
                        
                        index->next = currentNext;
                        currentNext->prev = index;
                        
                        current->next = indexNext;
                        indexNext->prev = current;
                        
                        indexPrev->next = current;
                        current->prev = indexPrev;
                    }

                    current = index;
                    break;
                }
                index = index->next;
            }
            current = current->next;
        } while (current != *head);
    }
}
Fungsi sortListAddress mengurutkan node dalam linked list berdasarkan data tetapi dengan mempertahankan alamat asli node.
Proses pengurutan menggunakan metode pertukaran data antar node.
Node yang menunjuk ke dirinya sendiri sebagai head tetap dipertahankan.

void sortListNumber(struct Node** head) {
    struct Node *current = *head, *index = NULL;
    int temp;

    if (*head == NULL) return;

    do {
        index = current->next;
        while (index != *head) {
            if (current->data > index->data) {
                temp = current->data;
                current->data = index->data;
                index->data = temp;
            }
            index = index->next;
        }
        current = current->next;
    } while (current != *head);
}
Fungsi sortListNumber mengurutkan node dalam linked list berdasarkan data menggunakan metode pertukaran sederhana.
Proses pengurutan hanya mengubah nilai data antar node tanpa mengubah pointer next dan prev.

int main() {
    struct Node* head = NULL;
    int N;
    scanf("%d", &N);
    
    for (int i = 0; i < N; ++i) {
        int data;
        scanf("%d", &data);
        insert(&head, data);
    }
    
    printf("Before sorting:\n");
    printList(head);
    
    sortListAddress(&head);
    sortListNumber(&head);
    
    printf("After sorting:\n");
    printList(head);
    
    return 0;
}
Fungsi main membaca jumlah node yang akan dimasukkan (N).
Loop digunakan untuk membaca data tiap node dan menyisipkannya ke dalam linked list.
Linked list dicetak sebelum dan sesudah pengurutan.
Fungsi sortListAddress dan sortListNumber dipanggil untuk mengurutkan node dan kemudian mencetak hasil akhirnya.





